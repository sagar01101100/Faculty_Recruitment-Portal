
//form.tsx
import {
	Button,
	Heading,
	Center,
	Image,
	Input,
	Text,
	FormControl,
	FormLabel,
	FormErrorMessage,
	FormHelperText,
	useToast,
	Alert,
	AlertIcon,
	Spinner,
	CloseButton,
	Flex,
	Box,
	IconButton,
	Modal,
	useBoolean,
	ModalBody,
	useDisclosure,
	ModalOverlay,
	ModalContent,
	Drawer,
	DrawerContent,
	DrawerBody,
	DrawerHeader,
	Stack,
	CheckboxGroup,
	Checkbox,
} from "@chakra-ui/react"
import { Field, FieldGroup } from "@prisma/client"
import { GetServerSideProps } from "next"
import Head from "next/head"
import { useState, useEffect } from "react"
import request from "superagent"
import prisma from "../../lib/prisma"
import { SuperInput } from "../../components/superInput"
import { LoadingToast } from "../../components/loadingToast"
import { SuperFormData } from "../../lib/formEntries"
import { getUser } from "../../lib/userUtils"
import { useRouter } from "next/router"
import { TableData, TableSchema } from "../../components/superInput/types"
import { z } from "zod"
import { Card } from "../../components/card"
import Sidebar from "../../components/sidebar"
import { SuperInputForm } from "../../components/superInputForm"
import { BsListCheck } from "react-icons/bs"
import { QueryClient, useMutation, useQuery, useQueryClient } from "react-query"
import { CheckList } from "../../components/checklist"
import IdleLogoutProvider from "../../components/IdleLogoutProvider"
import Link from "next/link" 


export const getServerSideProps: GetServerSideProps = async (context) => {
	const fieldGroups = await prisma.fieldGroup.findMany({
		orderBy: {
			id: "asc",
		},
		select: {
			id: true,
			title: true,
			description: true,
			fields: true,
		},
	})

	const fieldGroupId = context.query.id as string
 
	if (fieldGroupId) {
		const fields = await prisma.fieldGroup.findFirst({
			where: { id: parseInt(fieldGroupId) as number },
			include: {
				fields: {
					include: {
						fields: true,
					},
					orderBy: {
						id: "asc",
					},
				},
			},
		})
		if (fields) {
			return {
				props: {
					fields: fields!.fields,
					fieldGroups: fieldGroups,
				},
			}
		}
	}

	return {
		props: {
			fields: [],
			fieldGroups: fieldGroups,
		},
	}
}

export default function Form(props: {
	fields: (Field & {
		fields: Field[]
	})[]
	fieldGroups: {
		id: number
		title: string
		description: string | null
		fields: Field[]
		completedFields: Field[]
	}[]
}) {
	const toast = useToast()
	const router = useRouter()
	const { isOpen, onClose, onOpen } = useDisclosure()
	const [submissionDate, setSubmissionDate] = useState(new Date().toISOString())


	const currentGroup = parseInt(router.query.id as string)

	const onSave = async (data: SuperFormData) => {
		try {
			const token = localStorage.getItem("auth-token")
			const submissionDate = new Date().toISOString()
			setSubmissionDate(submissionDate)

			const res = await request
				.post("/api/save")
				.send({...data, snapshotId: router.query.snapshotId as string})
				.send({ ...data, snapshotId: router.query.snapshotId as string, submissionDate }) 
				.set("Authorization", `Bearer ${token}`)

			if (res) {
				toast({
					title: "Progress saved!",
					description: "You may now continue to other fields.",
					status: "success",
					duration: 3000,
					isClosable: true,
				})
			}
		} catch (e) {}
	}

	return (
		<>
		    <IdleLogoutProvider/>
			<Head>
				<title>IIT Patna </title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Flex direction="column" align="top" paddingLeft="125px" position="relative" zIndex={1000}>
				

				<Box position="absolute" top={5} right={5}>
					<IconButton
						aria-label="Open Checklist"
						icon={<BsListCheck />}
						onClick={onOpen}
					/>
				</Box>
			</Flex>

		

			<Drawer isOpen={isOpen} onClose={onClose}>
				<DrawerContent borderRadius={{ sm: 16 }} m={{ sm: 20 }}>
					<CheckList
						onSave={() => {
							onClose()
						}}
					/>
				</DrawerContent>
			</Drawer>
			
			<Box
			>   
			
				<SuperInputForm 
					fields={props.fields}
					onSave={onSave}
					
					

					// onSubmit={ () => {
						
					// 	router.push("/home")
					// }}

					fieldGroups={props.fieldGroups}
					currentGroup={currentGroup}
					showSidebar={true}
					isReferral={false}
				/>
			</Box>
			

		</>

	)
}











// form.tsx

// import {
// 	Button,
// 	Heading,
// 	Center,
// 	Image,
// 	Input,
// 	Text,
// 	FormControl,
// 	FormLabel,
// 	FormErrorMessage,
// 	FormHelperText,
// 	useToast,
// 	Alert,
// 	AlertIcon,
// 	Spinner,
// 	CloseButton,
// 	Flex,
// 	Box,
// 	IconButton,
// 	Modal,
// 	useBoolean,
// 	ModalBody,
// 	useDisclosure,
// 	ModalOverlay,
// 	ModalContent,
// 	Drawer,
// 	DrawerContent,
// 	DrawerBody,
// 	DrawerHeader,
// 	Stack,
// 	CheckboxGroup,
// 	Checkbox,
// } from "@chakra-ui/react"
// import { Field, FieldGroup } from "@prisma/client"
// import { GetServerSideProps } from "next"
// import Head from "next/head"
// import { useState, useEffect } from "react"
// import request from "superagent"
// import prisma from "../../lib/prisma"
// import { SuperInput } from "../../components/superInput"
// import { LoadingToast } from "../../components/loadingToast"
// import { SuperFormData } from "../../lib/formEntries"
// import { getUser } from "../../lib/userUtils"
// import { useRouter } from "next/router"
// import { TableData, TableSchema } from "../../components/superInput/types"
// import { z } from "zod"
// import { Card } from "../../components/card"
// import Sidebar from "../../components/sidebar"
// import { SuperInputForm } from "../../components/superInputForm"
// import { BsListCheck } from "react-icons/bs"
// import { QueryClient, useMutation, useQuery, useQueryClient } from "react-query"
// import { CheckList } from "../../components/checklist"
// import IdleLogoutProvider from "../../components/IdleLogoutProvider"
// import Link from "next/link"

// export const getServerSideProps: GetServerSideProps = async (context) => {
// 	const fieldGroups = await prisma.fieldGroup.findMany({
// 		orderBy: {
// 			id: "asc",
// 		},
// 		select: {
// 			id: true,
// 			title: true,
// 			description: true,
// 			fields: true,
// 		},
// 	})

// 	const fieldGroupId = context.query.id as string

// 	if (fieldGroupId) {
// 		const fields = await prisma.fieldGroup.findFirst({
// 			where: { id: parseInt(fieldGroupId) as number },
// 			include: {
// 				fields: {
// 					include: {
// 						fields: true,
// 					},
// 					orderBy: {
// 						id: "asc",
// 					},
// 				},
// 			},
// 		})
// 		if (fields) {
// 			return {
// 				props: {
// 					fields: fields!.fields,
// 					fieldGroups: fieldGroups,
// 				},
// 			}
// 		}
// 	}

// 	return {
// 		props: {
// 			fields: [],
// 			fieldGroups: fieldGroups,
// 		},
// 	}
// }

// export default function Form(props: {
// 	fields: (Field & {
// 		fields: Field[]
// 	})[]
// 	fieldGroups: {
// 		id: number
// 		title: string
// 		description: string | null
// 		fields: Field[]
// 		completedFields: Field[]
// 	}[]
// }) {
// 	const toast = useToast()
// 	const router = useRouter()
// 	const { isOpen, onClose, onOpen } = useDisclosure()
// 	const [submissionDate, setSubmissionDate] = useState(new Date().toISOString())

// 	const currentGroup = parseInt(router.query.id as string)

// 	const onSave = async (data: SuperFormData) => {
// 		try {
// 			const token = localStorage.getItem("auth-token")
// 			const submissionDate = new Date().toISOString()
// 			setSubmissionDate(submissionDate)

// 			const res = await request
// 				.post("/api/save")
// 				.send({ ...data, snapshotId: router.query.snapshotId as string, submissionDate })
// 				.set("Authorization", `Bearer ${token}`)

// 			if (res) {
// 				toast({
// 					title: "Progress saved!",
// 					description: "You may now continue to other fields.",
// 					status: "success",
// 					duration: 3000,
// 					isClosable: true,
// 				})
// 			}
// 		} catch (e) {
// 			console.error("Error saving progress", e)
// 		}
// 	}

// 	// Automatically save data when the user leaves the page or changes tabs
// 	useEffect(() => {
// 		const handleBeforeUnload = (event: BeforeUnloadEvent) => {
// 			// Gather form data and trigger the onSave function before the user navigates away
// 			const data = {} // Assuming you have a method to collect the form data
// 			onSave(data)
// 		}

// 		// Add event listener when the component mounts
// 		window.addEventListener("beforeunload", handleBeforeUnload)

// 		// Clean up the event listener when the component unmounts
// 		return () => {
// 			window.removeEventListener("beforeunload", handleBeforeUnload)
// 		}
// 	}, [])

// 	return (
// 		<>
// 			<IdleLogoutProvider />
// 			<Head>
// 				<title>IIT Patna</title>
// 				<meta name="description" content="Generated by create next app" />
// 				<link rel="icon" href="/favicon.ico" />
// 			</Head>

// 			<Flex direction="column" align="top" paddingLeft="125px" position="relative" zIndex={1000}>
// 				<Box position="absolute" top={5} right={5}>
// 					<IconButton aria-label="Open Checklist" icon={<BsListCheck />} onClick={onOpen} />
// 				</Box>
// 			</Flex>

// 			<Drawer isOpen={isOpen} onClose={onClose}>
// 				<DrawerContent borderRadius={{ sm: 16 }} m={{ sm: 20 }}>
// 					<CheckList
// 						onSave={() => {
// 							onClose()
// 						}}
// 					/>
// 				</DrawerContent>
// 			</Drawer>
// 			<Box>
// 				<SuperInputForm
// 					fields={props.fields}
// 					onSave={onSave}
// 					fieldGroups={props.fieldGroups}
// 					currentGroup={currentGroup}
// 					showSidebar={true}
// 					isReferral={false}
// 				/>
// 			</Box>
// 		</>
// 	)
// }
